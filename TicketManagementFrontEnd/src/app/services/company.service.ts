// src/app/services/company.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { environment } from '../../environments/environment';

export interface Company {
  id?: number; // Optional because it will be generated by the backend
  name: string;
  contactPerson: string; // Required by the backend model
  email: string;
  phone?: string; // Optional property
  address?: string; // Optional property
}

@Injectable({
  providedIn: 'root',
})
export class CompanyService {
  private apiUrl = `${environment.apiUrl}/companies`;

  constructor(private http: HttpClient) {}

  getCompanies(): Observable<Company[]> {
    return this.http
      .get<Company[]>(this.apiUrl, { headers: this.createHeaders() })
      .pipe(
        catchError((error) => {
          console.error('Error fetching companies:', error);
          return throwError(
            () => 'Failed to fetch companies. Please try again later.'
          );
        })
      );
  }

  getCompany(id: number): Observable<Company> {
    return this.http
      .get<Company>(`${this.apiUrl}/${id}`, { headers: this.createHeaders() })
      .pipe(
        catchError((error) => {
          console.error(`Error fetching company ${id}:`, error);
          return throwError(
            () => 'Failed to fetch company details. Please try again later.'
          );
        })
      );
  }

  addCompany(company: Company): Observable<Company> {
    return this.http
      .post<Company>(this.apiUrl, company, { headers: this.createHeaders() })
      .pipe(
        catchError((error) => {
          console.error('Error adding company:', error);
          return throwError(
            () => 'Failed to add company. Please try again later.'
          );
        })
      );
  }

  updateCompany(id: number, company: Company): Observable<Company> {
    return this.http
      .put<Company>(`${this.apiUrl}/${id}`, company, {
        headers: this.createHeaders(),
      })
      .pipe(
        catchError((error) => {
          console.error(`Error updating company ${id}:`, error);
          return throwError(
            () => 'Failed to update company. Please try again later.'
          );
        })
      );
  }

  deleteCompany(id: number): Observable<void> {
    return this.http
      .delete<void>(`${this.apiUrl}/${id}`, { headers: this.createHeaders() })
      .pipe(
        catchError((error) => {
          console.error(`Error deleting company ${id}:`, error);
          return throwError(
            () => 'Failed to delete company. Please try again later.'
          );
        })
      );
  }

  private createHeaders(): HttpHeaders {
    return new HttpHeaders({
      'Content-Type': 'application/json',
    });
  }
}
